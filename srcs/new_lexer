void check_num_of_quotes(char *input)
{
	int i;

	i = 0;
	while (input[i])
	{
		if (input[i] == '\"' || input[i] == '\'')
			i++;
	}
	if (i % 2 != 0)
		puterr(SYNERR);
}

void replace_spaces_in_quotes(char *input)
{
	int		quotes; 	// 0 no, 1 single, 2 double quotes
	int		i, j;
	quotes = 0;
	i = 0;
	j = 0;
	while (input[i] != '\0')
	{
		if (input[i] == '\'' && quotes == 0)
			quotes = 1;
		else if (input[i] == '\'' && quotes == 1)
			quotes = 0;
		if (input[i] == '\"' && quotes == 0)
			quotes = 2;
		else if (input[i] == '\"' && quotes == 2)
			quotes = 0;
		if (input[i] == ' ' && (quotes == 1 || quotes == 2))
			input[i] = '@';
		if (input[i] == '|' && (quotes == 1 || quotes == 2))
			input[i] = '$';
		i++;
	}
}


t_words	**init_word_stack(char *line)
{
	int	i;
	int	b;
	t_words **words;

	b = 0;
	i = 0;

	//Still have to check for BS input 
//---	check_num_of_quotes(line); // later becuase "blaaa'a"
\	
----split_by_pipe(line) //ft_split(line, '|'); done
	words = ft_calloc(get_num_of_pipes(line) + 2, sizeof(t_words *));
	while (split_command[i])
	{
		words[b] = ft_calloc(1, sizeof(t_words));
		if (!words[b])
			puterr(ALLOCERR);// exit with failure
		i = 0;
//---		extend spaces for redirection(split_command[i]);//done
----	clean_spaces(split_command[i]); (clean_words)
----	split by spaces(words[b]->word_clean);
----	bring back da spaces and da pipes(yomama);
---		expand_vars; //done
---		get_rid_of_quotes //done 
----	if_theres_redirection //done 
----	do redireciton //done
		b++;	
		i = 0;
	}
	words[b] = NULL;
	while (words[i] != NULL)
		words[i++]->num_of_elements = b;
	i = 0;
	// This checks if there are odd amount of quotes in the words:
	i = -1;
	while (words[++i])
	{
		int	quotes = 0;
		int	j = -1;
		while (words[i]->word[++j])
		{
			if (words[i]->word[j] == '\'' || words[i]->word[j] == '\"')
				quotes++;
		}
		if (quotes % 2 != 0)
		{
			puterr(SYNERR);
			printf("CMD is FUCKED\n");
		}
	}
	// printf("InLexer1:%s\n", words[0]->word);
	// printf("InLexer2:%s\n", words[1]->word);

	// free_dirty_words(words);
	return(words);
}
